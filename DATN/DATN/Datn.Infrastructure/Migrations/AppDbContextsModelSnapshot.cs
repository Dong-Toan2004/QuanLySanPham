// <auto-generated />
using System;
using Datn.Infrastructure.Database.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Datn.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContexts))]
    partial class AppDbContextsModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Datn.Domain.Database.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.CartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartsDetails");
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mô hình anime"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mô hình GunDam"
                        });
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c89f8da-3bf1-4e4c-be36-b0e38e74158c"),
                            CategoryId = 1,
                            Description = "Mô hình anime tái hiện nhân vật chi tiết từ anime với trang phục và cảm xúc đặc trưng.",
                            Image = "/img/sanpham4.jpg",
                            Name = "SP1",
                            Price = 100000m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = new Guid("eac1ac4c-09ac-4520-86a5-de82e82c4f23"),
                            CategoryId = 2,
                            Description = "Mô hình anime tái hiện nhân vật chi tiết từ anime với trang phục và cảm xúc đặc trưng.",
                            Image = "/img/sanpham6.jpg",
                            Name = "SP2",
                            Price = 150000m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = new Guid("fad0aa11-2ccd-4bfa-a552-bb43b3ac3b21"),
                            CategoryId = 1,
                            Description = "Mô hình anime tái hiện nhân vật chi tiết từ anime với trang phục và cảm xúc đặc trưng.",
                            Image = "/img/sanpham5.jpg",
                            Name = "SP3",
                            Price = 200000m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = new Guid("96a26b0e-2ee5-42f6-a77c-e52583747883"),
                            CategoryId = 2,
                            Description = "Mô hình anime tái hiện nhân vật chi tiết từ anime với trang phục và cảm xúc đặc trưng.",
                            Image = "/img/sanpham6.jpg",
                            Name = "SP4",
                            Price = 150000m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = new Guid("3b4f1691-71a8-42bb-90aa-fd3b7d0d17b3"),
                            CategoryId = 1,
                            Description = "Mô hình anime tái hiện nhân vật chi tiết từ anime với trang phục và cảm xúc đặc trưng.",
                            Image = "/img/sanpham4.jpg",
                            Name = "SP5",
                            Price = 100000m,
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f69cdc7-faf2-47e6-823b-4687d5924526"),
                            PassWord = "123",
                            UserName = "Admin1"
                        });
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.Cart", b =>
                {
                    b.HasOne("Datn.Domain.Database.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Datn.Domain.Database.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.CartDetail", b =>
                {
                    b.HasOne("Datn.Domain.Database.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn.Domain.Database.Entities.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.Product", b =>
                {
                    b.HasOne("Datn.Domain.Database.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.Product", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Datn.Domain.Database.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
